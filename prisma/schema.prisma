// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String    @id @default(cuid())
  email                       String    @unique
  username                    String?   @unique
  password                    String
  name                        String?
  phone                       String?
  
  // Balances
  cashBalance                 Float     @default(0)
  bonusBalance                Float     @default(0)
  lockedBalance               Float     @default(0)
  virtualBalance              Float     @default(1000)
  
  // Wagering
  activeWageringRequirement   Float     @default(0)
  currentWageringProgress     Float     @default(0)
  wageringMultiplier          Float     @default(20)
  
  // Game settings
  diceGameEdge                Float     @default(5)
  diceBattleEdge              Float     @default(5)
  diceRouletteEdge            Float     @default(5)
  maxBetWhileBonus            Float     @default(50)
  maxBonusCashout             Float     @default(1000)
  
  // Stats
  currentWinStreak            Int       @default(0)
  totalGameWins               Int       @default(0)
  totalGameLosses             Int       @default(0)
  
  // Admin & Affiliate
  isAdmin                     Boolean   @default(false)
  isAffiliate                 Boolean   @default(false)
  affiliateCode               String?   @unique
  affiliateCommission         Float     @default(0)
  referredBy                  String?
  
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  
  // Relations
  games                       Game[]
  gameRounds                  GameRound[]
  transactions                Transaction[]
  bonuses                     Bonus[]
  cryptoWallet                CryptoWallet?
  cryptoDeposits              CryptoDeposit[]
  cryptoWithdrawals           CryptoWithdrawal[]
  bugReports                  BugReport[]
  affiliateStats              AffiliateStats?
  affiliatePayoutPeriods      AffiliatePayoutPeriod[]
}

model Game {
  id          String      @id @default(cuid())
  userId      String
  gameType    String      // 'dice', 'dicebattle', 'diceroulette'
  stake       Float
  totalPot    Float
  finalPot    Float?
  status      String      // 'active', 'cashed_out', 'lost', 'tie'
  betSource   String?     // 'cash', 'bonus', 'mixed'
  bonusUsed   Float       @default(0)
  cashUsed    Float       @default(0)
  metadata    String?     // JSON string for game-specific data
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id])
  rounds      GameRound[]
}

model GameRound {
  id                      String    @id @default(cuid())
  gameId                  String
  userId                  String
  roundNumber             Int
  dice1                   Int
  dice2                   Int
  dice3                   Int
  points                  Int?
  multiplier              Float     @default(1.0)
  potBefore               Float
  potAfter                Float
  serverSeed              String?
  clientSeed              String?
  nonce                   Int?
  wageringContribution    Float     @default(0)
  metadata                String?   // JSON string for additional data
  createdAt               DateTime  @default(now())
  
  game                    Game      @relation(fields: [gameId], references: [id])
  user                    User      @relation(fields: [userId], references: [id])
}

model Transaction {
  id                    String    @id @default(cuid())
  userId                String
  type                  String    // 'bet', 'win', 'deposit', 'withdrawal', 'bonus_grant', 'bonus_conversion'
  amount                Float
  cashChange            Float     @default(0)
  bonusChange           Float     @default(0)
  lockedChange          Float     @default(0)
  cashBalanceAfter      Float
  bonusBalanceAfter     Float
  lockedBalanceAfter    Float
  virtualBalanceAfter   Float
  description           String?
  reference             String?   // Game ID, transaction hash, etc.
  createdAt             DateTime  @default(now())
  
  user                  User      @relation(fields: [userId], references: [id])
}

model Bonus {
  id                    String    @id @default(cuid())
  userId                String
  amount                Float
  type                  String    // 'signup', 'deposit', 'admin_bonus'
  description           String?
  wageringRequired      Float
  wageringMultiplier    Float
  status                String    @default("active") // 'active', 'completed', 'expired'
  completedAt           DateTime?
  createdAt             DateTime  @default(now())
  
  user                  User      @relation(fields: [userId], references: [id])
}

model CryptoWallet {
  id                    String    @id @default(cuid())
  userId                String    @unique
  usdtAddress           String
  usdtPrivateKey        String    // Encrypted
  usdcAddress           String
  usdcPrivateKey        String    // Encrypted
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User                @relation(fields: [userId], references: [id])
  deposits              CryptoDeposit[]
  withdrawals           CryptoWithdrawal[]
}

model CryptoDeposit {
  id                    String    @id @default(cuid())
  userId                String
  walletId              String
  amount                Float     // Token amount (USDT/USDC)
  currency              String    // 'USDT', 'USDC'
  network               String    // 'TRC20'
  toAddress             String
  txHash                String    @unique
  status                String    @default("pending") // 'pending', 'confirmed', 'failed'
  confirmations         Int       @default(0)
  createdAt             DateTime  @default(now())
  
  user                  User          @relation(fields: [userId], references: [id])
  wallet                CryptoWallet  @relation(fields: [walletId], references: [id])
}

model CryptoWithdrawal {
  id                    String    @id @default(cuid())
  userId                String
  walletId              String
  amount                Float     // Token amount (USDT/USDC)
  currency              String    // 'USDT', 'USDC'
  network               String    // 'TRC20'
  toAddress             String
  txHash                String?
  status                String    @default("processing") // 'processing', 'completed', 'failed'
  createdAt             DateTime  @default(now())
  
  user                  User          @relation(fields: [userId], references: [id])
  wallet                CryptoWallet  @relation(fields: [walletId], references: [id])
}

model BugReport {
  id                    String    @id @default(cuid())
  userId                String?
  subject               String
  message               String
  status                String    @default("open") // 'open', 'in_progress', 'resolved', 'closed'
  priority              String    @default("medium") // 'low', 'medium', 'high', 'critical'
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User?     @relation(fields: [userId], references: [id])
}

model AffiliateStats {
  id                    String    @id @default(cuid())
  userId                String    @unique
  payoutWallet          String?
  payoutPeriod          String    @default("Monthly") // 'Weekly', 'Bi-weekly', 'Monthly', 'Quarterly'
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User      @relation(fields: [userId], references: [id])
}

model AffiliatePayoutPeriod {
  id                    String    @id @default(cuid())
  affiliateId           String
  periodStart           DateTime
  periodEnd             DateTime
  totalProfit           Float     @default(0)
  commission            Float     @default(0)
  status                String    @default("ongoing") // 'ongoing', 'pending', 'finished'
  createdAt             DateTime  @default(now())
  
  affiliate             User      @relation(fields: [affiliateId], references: [id])
}