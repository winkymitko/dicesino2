generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ──────────────────────────────────────────────────────────────
   Enums (strongly typed instead of free-text)
   ────────────────────────────────────────────────────────────── */
enum Currency {
  USDT
  USDC
  LTC
}

enum Network {
  TRC20
  LTC
}

enum DepositStatus {
  pending
  confirmed
  failed
}

enum WithdrawalStatus {
  pending
  processing
  completed
  failed
}

enum TransactionType {
  deposit
  withdrawal
  bet
  win
  bonus_grant
  bonus_conversion
}

/* ──────────────────────────────────────────────────────────────
   User & gameplay
   ────────────────────────────────────────────────────────────── */
model User {
  id                       String   @id @default(cuid())
  email                    String   @unique
  username                 String?            // Auto-generated from email
  password                 String
  name                     String?
  phone                    String?

  // Wallet & balances
  cashBalance              Float    @default(0)     // Withdrawable money (USD)
  bonusBalance             Float    @default(0)     // Play-only bonus money
  lockedBalance            Float    @default(0)     // Bonus winnings pending wagering
  virtualBalance           Float    @default(1000)  // Demo money

  // Wagering requirements
  activeWageringRequirement Float   @default(0)
  currentWageringProgress   Float   @default(0)
  wageringMultiplier        Float   @default(20)

  isAdmin                  Boolean  @default(false)
  currentWinStreak         Int      @default(0)

  // Per-game edges
  diceGameEdge             Float    @default(5.0)
  diceBattleEdge           Float    @default(5.0)
  diceRouletteEdge         Float    @default(5.0)

  // Risk controls
  maxBetWhileBonus         Float    @default(50)
  maxBonusCashout          Float    @default(1000)

  // Affiliate
  isAffiliate              Boolean  @default(false)
  affiliateCode            String?  @unique
  affiliateCommission      Float    @default(0)
  referredBy               String?

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  games                    Game[]
  gameRounds               GameRound[]
  bonuses                  Bonus[]
  transactions             Transaction[]
  cryptoWallet             CryptoWallet?      // 1:1
  cryptoDeposits           CryptoDeposit[]
  cryptoWithdrawals        CryptoWithdrawal[]
  affiliatePayoutPeriods   AffiliatePayoutPeriod[]
  affiliateStats           AffiliateStats?
  bugReports               BugReport[]

  @@map("users")
  @@index([email])
}

/* ──────────────────────────────────────────────────────────────
   Games
   ────────────────────────────────────────────────────────────── */
model Game {
  id         String   @id @default(cuid())
  userId     String
  gameType   String
  stake      Float
  totalPot   Float
  finalPot   Float?
  status     String   // "active", "cashed_out", "lost", "tie"

  // Bonus tracking
  betSource  String   @default("cash")
  bonusUsed  Float    @default(0)
  cashUsed   Float    @default(0)

  metadata   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User        @relation(fields: [userId], references: [id])
  rounds GameRound[]

  @@map("games")
  @@index([userId, createdAt])
}

model GameRound {
  id           String   @id @default(cuid())
  gameId       String
  userId       String
  roundNumber  Int
  dice1        Int
  dice2        Int
  dice3        Int
  points       Int
  multiplier   Float
  potBefore    Float
  potAfter     Float
  serverSeed   String
  clientSeed   String
  nonce        Int

  // Wagering tracking
  wageringContribution Float @default(0)

  metadata     String?
  createdAt    DateTime @default(now())

  game Game @relation(fields: [gameId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("game_rounds")
  @@index([userId, createdAt])
}

/* ──────────────────────────────────────────────────────────────
   Bonuses & transactions
   ────────────────────────────────────────────────────────────── */
model Bonus {
  id                  String   @id @default(cuid())
  userId              String
  amount              Float
  type                String   // keeping free-text for flexibility
  description         String?

  wageringRequired    Float    @default(0)
  wageringMultiplier  Float    @default(20)
  wageringCompleted   Boolean  @default(false)

  status              String   @default("active")
  expiresAt           DateTime?
  completedAt         DateTime?
  createdAt           DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("bonuses")
  @@index([userId, createdAt])
}

model Transaction {
  id                   String           @id @default(cuid())
  userId               String
  type                 String
  amount               Float            // USD impact (+/-)

  // Balance changes (USD unless noted)
  cashChange           Float @default(0)
  bonusChange          Float @default(0)
  lockedChange         Float @default(0)
  virtualChange        Float @default(0)

  // Balances after transaction
  cashBalanceAfter     Float
  bonusBalanceAfter    Float
  lockedBalanceAfter   Float
  virtualBalanceAfter  Float

  description          String?
  reference            String?
  metadata             String?
  createdAt            DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("transactions")
  @@index([userId, createdAt])
}

/* ──────────────────────────────────────────────────────────────
   Crypto wallets (1 per user; 3 distinct addresses)
   ────────────────────────────────────────────────────────────── */
model CryptoWallet {
  id             String   @id @default(cuid())
  userId         String   @unique

  // USDT TRC20
  usdtAddress    String?  @unique
  usdtPrivateKey String?  // encrypted

  // USDC TRC20
  usdcAddress    String?  @unique
  usdcPrivateKey String?  // encrypted

  // LTC
  ltcAddress     String?  @unique
  ltcPrivateKey  String?  // encrypted

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id])
  deposits       CryptoDeposit[]

  @@map("crypto_wallets")
}

/* ──────────────────────────────────────────────────────────────
   Crypto I/O
   ────────────────────────────────────────────────────────────── */
model CryptoDeposit {
  id            String         @id @default(cuid())
  userId        String
  walletId      String
  amount        Float          // native token units (USDT/USDC/LTC)
  currency      Currency
  network       Network
  toAddress     String
  txHash        String         @unique
  status        DepositStatus  @default(pending)
  confirmations Int            @default(0)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User         @relation(fields: [userId], references: [id])
  wallet        CryptoWallet @relation(fields: [walletId], references: [id])

  @@map("crypto_deposits")
  @@index([userId, createdAt])
  @@index([currency, createdAt])
  @@index([toAddress])
}

model CryptoWithdrawal {
  id            String            @id @default(cuid())
  userId        String
  amount        Float             // native token units requested
  currency      Currency
  network       Network
  toAddress     String
  txHash        String?           @unique
  status        WithdrawalStatus  @default(pending)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User @relation(fields: [userId], references: [id])

  @@map("crypto_withdrawals")
  @@index([userId, createdAt])
  @@index([currency, createdAt])
  @@index([toAddress])
}

/* ──────────────────────────────────────────────────────────────
   Affiliate & misc
   ────────────────────────────────────────────────────────────── */
model AffiliatePayoutPeriod {
  id              String   @id @default(cuid())
  affiliateId     String
  periodStart     DateTime
  periodEnd       DateTime
  totalProfit     Float    @default(0)
  commission      Float    @default(0)
  status          String   @default("ongoing")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  affiliate       User     @relation(fields: [affiliateId], references: [id])

  @@map("affiliate_payout_periods")
  @@index([affiliateId, periodStart, periodEnd])
}

model AffiliateStats {
  id                String   @id @default(cuid())
  userId            String   @unique
  payoutWallet      String?
  payoutPeriod      String   @default("Monthly")
  payoutRequested   Boolean  @default(false)
  pendingCommission Float    @default(0)
  requestedPayout   Float    @default(0)
  totalCommission   Float    @default(0)
  totalReferrals    Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id])

  @@map("affiliate_stats")
}

model BugReport {
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  subject   String
  message   String
  status    String   @default("open")
  priority  String   @default("medium")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id])

  @@map("bug_reports")
  @@index([userId, createdAt])
}
