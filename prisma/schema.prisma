generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  phone             String?
  realBalance       Float    @default(0)
  virtualBalance    Float    @default(1000) // Starting virtual money
  isAdmin           Boolean  @default(false)
  winChanceModifier Float    @default(1.0) // Admin can adjust win chances
  totalInvested     Float    @default(0)
  totalGames        Int      @default(0)
  totalWins         Int      @default(0)
  totalLosses       Int      @default(0)
  currentWinStreak  Int      @default(0)
  maxWinStreak      Int      @default(0)
  casinoProfitDice     Float    @default(0) // Casino profit from BarboDice
  casinoProfitBattle   Float    @default(0) // Casino profit from DiceBattle
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Per-game win chance modifiers
  diceGameModifier     Float @default(1.0)
  diceBattleModifier   Float @default(1.0)

  games       Game[]
  gameRounds  GameRound[]
  bonuses     Bonus[]
  cryptoWallets CryptoWallet?
  cryptoDeposits CryptoDeposit[]

  @@map("users")
}

model Game {
  id        String   @id @default(cuid())
  userId    String
  gameType  String   // "dice", "slots", etc for future games
  stake     Float
  totalPot  Float
  finalPot  Float?
  status    String   // "active", "cashed_out", "lost"
  metadata  String?  // JSON string for game-specific data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User        @relation(fields: [userId], references: [id])
  rounds GameRound[]

  @@map("games")
}

model GameRound {
  id          String   @id @default(cuid())
  gameId      String
  userId      String
  roundNumber Int
  dice1       Int
  dice2       Int
  dice3       Int
  points      Int
  multiplier  Float
  potBefore   Float
  potAfter    Float
  serverSeed  String   // For provably fair
  clientSeed  String   // For provably fair
  nonce       Int      // For provably fair
  metadata    String?  // JSON string for round-specific data
  createdAt   DateTime @default(now())

  game Game @relation(fields: [gameId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("game_rounds")
}

model Bonus {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  type        String   // "admin_bonus", "welcome", etc
  description String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("bonuses")
}
model CryptoWallet {
  id         String   @id @default(cuid())
  userId     String   @unique
  address    String   @unique
  privateKey String   // In production, encrypt this!
  currency   String   @default("USDT")
  network    String   @default("TRC20")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id])
  deposits CryptoDeposit[]

  @@map("crypto_wallets")
}

model CryptoDeposit {
  id            String   @id @default(cuid())
  userId        String
  walletId      String
  amount        Float
  currency      String   @default("USDT")
  txHash        String   @unique
  status        String   @default("pending") // pending, confirmed, failed
  confirmations Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User         @relation(fields: [userId], references: [id])
  wallet CryptoWallet @relation(fields: [walletId], references: [id])

  @@map("crypto_deposits")
}